[{"C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\index.js":"1","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\App.js":"2","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\auth\\Register.js":"3","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\auth\\Login.js":"4","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\firebase.js":"5","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\context\\user_context.js":"6","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\actions.js":"7","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\reducers\\user_reducer.js":"8","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\ColorPanel\\ColorPanel.js":"9","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\Messages\\Messages.js":"10","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\SidePanel\\SidePanel.js":"11","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\MetaPanel\\MetaPanel.js":"12","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\SidePanel\\UserPanel.js":"13","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\SidePanel\\Channels.js":"14","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\context\\channel_context.js":"15","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\reducers\\channel_reducer.js":"16","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\Messages\\MessagesHeader.js":"17","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\Messages\\MessagesForm.js":"18","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\Messages\\Message.js":"19","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\Messages\\FileModal.js":"20","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\Messages\\ProgressBar.js":"21","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\SidePanel\\DirectMessages.js":"22"},{"size":975,"mtime":1611255835635,"results":"23","hashOfConfig":"24"},{"size":1156,"mtime":1611086118985,"results":"25","hashOfConfig":"24"},{"size":5234,"mtime":1610927225890,"results":"26","hashOfConfig":"24"},{"size":3222,"mtime":1611105623312,"results":"27","hashOfConfig":"24"},{"size":637,"mtime":1611366411135,"results":"28","hashOfConfig":"24"},{"size":966,"mtime":1611361032994,"results":"29","hashOfConfig":"24"},{"size":194,"mtime":1611016300169,"results":"30","hashOfConfig":"24"},{"size":543,"mtime":1610914717380,"results":"31","hashOfConfig":"24"},{"size":394,"mtime":1611083532216,"results":"32","hashOfConfig":"24"},{"size":2418,"mtime":1611365568113,"results":"33","hashOfConfig":"24"},{"size":553,"mtime":1611274573375,"results":"34","hashOfConfig":"24"},{"size":664,"mtime":1611364822825,"results":"35","hashOfConfig":"24"},{"size":1843,"mtime":1610927746000,"results":"36","hashOfConfig":"24"},{"size":4597,"mtime":1611347048408,"results":"37","hashOfConfig":"24"},{"size":690,"mtime":1611270674129,"results":"38","hashOfConfig":"24"},{"size":311,"mtime":1611159353036,"results":"39","hashOfConfig":"24"},{"size":723,"mtime":1611275089020,"results":"40","hashOfConfig":"24"},{"size":4899,"mtime":1611346550527,"results":"41","hashOfConfig":"24"},{"size":1205,"mtime":1611256119820,"results":"42","hashOfConfig":"24"},{"size":1669,"mtime":1611246125538,"results":"43","hashOfConfig":"24"},{"size":335,"mtime":1611272525379,"results":"44","hashOfConfig":"24"},{"size":3328,"mtime":1611363402563,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1qooohb",{"filePath":"49","messages":"50","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"48"},"C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\index.js",[],["103","104"],"C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\App.js",["105","106","107","108","109","110"],"import React from 'react';\r\nimport './App.css';\r\nimport { useUserContext } from '../src/context/user_context';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ColorPanel from '../src/components/ColorPanel/ColorPanel';\r\nimport Messages from '../src/components/Messages/Messages';\r\nimport SidePanel from '../src/components/SidePanel/SidePanel';\r\nimport MetaPanel from '../src/components/MetaPanel/MetaPanel';\r\nimport { Grid, Form, Segment, Button, Header, Message, Icon} from 'semantic-ui-react';\r\n\r\nconst App = () => {\r\n\r\n  const { user } = useUserContext();\r\n  let history = useHistory();\r\n\r\n    return (\r\n      <div className=\"App\">\r\n   \r\n     {user !== undefined && user ? (\r\n\r\n\r\n       <Grid columns-=\"equal\" className=\"app\" style={{ background: '#eee'}} >\r\n         <ColorPanel />\r\n         <SidePanel />\r\n         <Grid.Column style={{ marginLeft: 320}}>\r\n             <Messages />\r\n         </Grid.Column>\r\n         <Grid.Column style={{ marginLeft:820 }}>   \r\n            <MetaPanel />\r\n         </Grid.Column>\r\n     \r\n       </Grid>\r\n       \r\n\r\n     ) : history.push('/login')\r\n      } \r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\auth\\Register.js",["111"],"import React, { useState } from 'react';\r\nimport '../../../src/App.css';\r\nimport { Grid, Form, Segment, Button, Header, Message, Icon} from 'semantic-ui-react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\nimport md5 from 'md5';\r\n\r\nconst Register = () => { \r\n\r\n    const [userName, setUserName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\"); \r\n    const [confirmPassword, setConfirmPassword] = useState(\"\"); \r\n    const [errors, setErrors] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [usersRef, setUsersRef] = useState(firebase.database().ref('users'));\r\n    const history = useHistory();\r\n\r\n    const handleChange = (e) => {\r\n        if(e.target.name === \"username\"){\r\n             setUserName(e.target.value);\r\n        }\r\n        if(e.target.name === \"email\"){\r\n              setEmail(e.target.value)\r\n        }\r\n        if(e.target.name === \"password\") {\r\n             setPassword(e.target.value)\r\n        }\r\n        if(e.target.name === \"passwordConfirmation\") {\r\n             setConfirmPassword(e.target.value)\r\n        }\r\n    }\r\n    \r\n    const isFormValid = () => {\r\n        if(isFormEmpty()) {\r\n            setErrors([\"Complete all the fields\"])\r\n            console.log(errors, \"the errors array\");\r\n            return false;\r\n        } else if(!isPasswordValid()) {\r\n            setErrors([\"Your passwords do not match\"])\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const isFormEmpty = () => {\r\n        return userName === '' || email === '' || password === '' || confirmPassword === '';\r\n    }\r\n\r\n    const isPasswordValid = () => {\r\n          return password === confirmPassword && password.length > 6\r\n    }\r\n\r\n    const handleInputError = (errors, inputName) => {\r\n       return errors.some(error => error.toLowerCase().includes(inputName)) ? 'error': ''\r\n    }\r\n\r\n    const saveUser = (createdUser) => {\r\n        return usersRef.child(createdUser.user.uid).set({\r\n            name:createdUser.user.displayName,\r\n            avatar:createdUser.user.photoURL\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n         e.preventDefault(); \r\n         if(isFormValid()) {\r\n             setErrors([]);\r\n             setLoading(true);\r\n        firebase.auth()\r\n        .createUserWithEmailAndPassword(email, password)\r\n        .then(createdUser => {\r\n            console.log(createdUser);\r\n            setLoading(false)\r\n            createdUser.user.updateProfile({\r\n                displayName:userName,\r\n                photoURL:`http://gravatar.com/avatar/${md5(createdUser.user.email)}?d=identicon`\r\n            })\r\n            .then(() => {\r\n                console.log(createdUser, \"the created user after update\");\r\n                    saveUser(createdUser).then(()=> {\r\n                        console.log('user saved');\r\n                        history.push('/login');\r\n                    })\r\n            })\r\n        }).catch(err => {\r\n            setLoading(false);\r\n            setErrors([err.message]);\r\n        })\r\n    }\r\n}\r\n\r\n   \r\n\r\n        return (\r\n              <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\r\n                  <Grid.Column style={{ maxWidth: 450}}>\r\n                      <Header as=\"h2\" icon color=\"orange\" textAlign=\"center\">\r\n                          <Icon name=\"puzzle piece\" color=\"orange\" />\r\n                          Register For Developer Chat\r\n                      </Header>\r\n                      <Form onSubmit={handleSubmit} size=\"large\">\r\n                          <Segment>\r\n                      <Form.Input \r\n                      fluid name=\"username\" icon=\"user\" iconPosition=\"left\"\r\n                          placeholder=\"Username\" onChange={handleChange} type=\"text\" value={userName}/>\r\n                     <Form.Input className={handleInputError(errors, \"email\")}\r\n                     fluid name=\"email\" icon=\"mail\" iconPosition=\"left\"\r\n                          placeholder=\"Email Address\" onChange={handleChange} type=\"text\" value={email} />\r\n                     <Form.Input className={handleInputError(errors, \"password\")} fluid name=\"password\" icon=\"lock\" iconPosition=\"left\" value={password}\r\n                          placeholder=\"Password\" onChange={handleChange} type=\"text\" />\r\n                     <Form.Input className={handleInputError(errors, \"password\")} fluid name=\"passwordConfirmation\" icon=\"repeat\" iconPosition=\"left\"\r\n                          placeholder=\"Confirm Password\" onChange={handleChange} type=\"text\" value={confirmPassword} />\r\n\r\n                          <Button disabled={loading} className={loading ? 'loading':'' }color=\"orange\" fluid size=\"large\">Submit</Button>\r\n                          </Segment>\r\n                      </Form>\r\n                  {errors.size !==0 && errors.map(error => (\r\n                      <Message className='error'>{error}</Message>\r\n                  ))}\r\n         \r\n                     \r\n                      <Message>Already a user<Link to=\"/login\"></Link></Message>\r\n                  </Grid.Column>\r\n\r\n              </Grid>\r\n    );\r\n  }\r\n\r\nexport default Register;","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\auth\\Login.js",["112","113"],"import React, { useState } from 'react';\r\nimport '../../../src/App.css';\r\nimport { Grid, Form, Segment, Button, Header, Message, Icon} from 'semantic-ui-react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\nimport { useUserContext } from '../../context/user_context';\r\nimport { useChannelContext } from '../../context/channel_context';\r\n\r\nexport const Login = () => {\r\n\r\n  const { setGlobalUser } = useUserContext();\r\n  const { channel, setChannel  } = useChannelContext();\r\n  let history = useHistory();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");  \r\n  const [errors, setErrors] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    if(e.target.name === \"email\"){\r\n          setEmail(e.target.value)\r\n    }\r\n    if(e.target.name === \"password\") {\r\n         setPassword(e.target.value)\r\n    }\r\n}\r\n\r\nconst isFormValid = () => {\r\n    if(isFormEmpty()) {\r\n        setErrors([\"Complete all the fields\"])\r\n        console.log(errors, \"the errors array\");\r\n        return false;\r\n    } else {\r\n        return true;\r\n    }\r\n}\r\n\r\nconst isFormEmpty = () => {\r\n    return email === '' || password === '';\r\n}\r\n\r\n\r\n\r\nconst handleInputError = (errors, inputName) => {\r\n   return errors.some(error => error.toLowerCase().includes(inputName)) ? 'error': ''\r\n}\r\n\r\n\r\nconst handleSubmit = (e) => {\r\n     e.preventDefault(); \r\n     if(isFormValid()) {\r\n         setErrors([]);\r\n         setLoading(true);\r\n         firebase.auth()\r\n         .signInWithEmailAndPassword(email, password)\r\n         .then(signedInUser => {\r\n           console.log(signedInUser);\r\n           setLoading(false);\r\n           setGlobalUser(signedInUser);\r\n\r\n           history.push('/');\r\n         })\r\n         .catch(err => {\r\n           setErrors([err.message])\r\n           setLoading(false);\r\n         })\r\n}\r\n}\r\n    return (\r\n\r\n      <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\r\n      <Grid.Column style={{ maxWidth: 450}}>\r\n          <Header as=\"h2\" icon color=\"orange\" textAlign=\"center\">\r\n              <Icon name=\"puzzle piece\" color=\"orange\" />\r\n              Login to Developer Chat\r\n          </Header>\r\n          <Form onSubmit={handleSubmit} size=\"large\">\r\n              <Segment>\r\n         <Form.Input className={handleInputError(errors, \"email\")}\r\n         fluid name=\"email\" icon=\"mail\" iconPosition=\"left\"\r\n              placeholder=\"Email Address\" onChange={handleChange} type=\"text\" value={email} />\r\n         <Form.Input className={handleInputError(errors, \"password\")} fluid name=\"password\" icon=\"lock\" iconPosition=\"left\" value={password}\r\n              placeholder=\"Password\" onChange={handleChange} type=\"text\" />\r\n              <Button disabled={loading} className={loading ? 'loading':'' }color=\"orange\" fluid size=\"large\">Login</Button>\r\n              </Segment>\r\n          </Form>\r\n      {errors.size !==0 && errors.map(error => (\r\n          <Message className='error'>{error}</Message>\r\n      ))}\r\n\r\n         \r\n          <Message><Link to=\"/register\">No Account - click to register</Link></Message>\r\n      </Grid.Column>\r\n\r\n  </Grid>\r\n);\r\n\r\n}\r\n\r\nexport default Login;","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\firebase.js",[],"C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\context\\user_context.js",["114"],"import React, { useEffect, useContext, useReducer } from 'react'\r\nimport reducer from '../reducers/user_reducer'\r\nimport {\r\n  GET_GLOBAL_USER,\r\n  SET_GLOBAL_USER,\r\n  CLEAR_GLOBAL_USER\r\n} from '../actions';\r\n\r\nconst initialState = []\r\n\r\nconst UserContext = React.createContext()\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n\r\n  const setGlobalUser = (user) => {\r\n    dispatch({type:SET_GLOBAL_USER, payload:user})\r\n  }\r\n\r\n  const getGlobalUser = () => {\r\n    dispatch({type:GET_GLOBAL_USER});\r\n  }\r\n\r\n  const clearGlobalUser = () => {\r\n    console.log(state, \"before\");\r\n    dispatch({type:CLEAR_GLOBAL_USER});\r\n    console.log(state, \"after\");\r\n  }\r\n\r\n  return (\r\n    <UserContext.Provider value={{...state, clearGlobalUser, setGlobalUser, getGlobalUser}}>{children}</UserContext.Provider>\r\n  )\r\n}\r\n// make sure use\r\nexport const useUserContext = () => {\r\n  return useContext(UserContext)\r\n}\r\n","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\actions.js",[],"C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\reducers\\user_reducer.js",[],"C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\ColorPanel\\ColorPanel.js",[],"C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\Messages\\Messages.js",["115","116"],"C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\SidePanel\\SidePanel.js",["117","118","119","120","121","122","123"],"import React from 'react';\r\nimport { Grid, Menu, Form, Segment, Button, Header, Message, Icon} from 'semantic-ui-react';\r\nimport UserPanel from './UserPanel';\r\nimport Channels from './Channels';\r\nimport DirectMessages from './DirectMessages';\r\n\r\nconst SidePanel = () => {\r\n\r\n\r\n    return (\r\n      <Menu size=\"large\" inverted fixed=\"left\" vertical style={{ background: '#4c3c4c', fontSize:'1.2rem'}}>\r\n            <UserPanel />\r\n            <Channels />\r\n            <DirectMessages />\r\n      </Menu>\r\n   \r\n    )\r\n  \r\n    }\r\n\r\nexport default SidePanel;\r\n","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\MetaPanel\\MetaPanel.js",["124","125"],"import React, {useState} from 'react';\r\nimport {Segment, Accordion, Header, Icon } from 'semantic-ui-react';\r\n\r\nconst MetaPanel = () => {\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0)\r\n\r\n\r\n  \r\n    const setActiveIndexFunction = () => {\r\n\r\n    }\r\n\r\n    return (\r\n     <Segment>\r\n         <Header as=\"h3\" attached=\"top\">\r\n             About # channel \r\n            \r\n         </Header>\r\n         <Accordion styled attached=\"true\">\r\n             <Accordion.Title active={activeIndex === 0 } index={0} onClick={setActiveIndexFunction}>\r\n             </Accordion.Title>\r\n         </Accordion>\r\n     </Segment>\r\n    )\r\n  \r\n    }\r\n\r\nexport default MetaPanel;\r\n","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\SidePanel\\UserPanel.js",["126","127","128","129","130"],"import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Grid, Menu, Form, Segment, Button, Header, Dropdown, Message, Image, Icon} from 'semantic-ui-react';\r\nimport { useUserContext } from '../../context/user_context';\r\nimport firebase from '../../firebase';\r\n\r\nconst UserPanel = () => {\r\n\r\n    let history = useHistory();\r\n    const { user, clearGlobalUser } = useUserContext();\r\n\r\n\r\n    const signOutUser = () => {\r\n        firebase.auth()\r\n        .signOut()\r\n        .then(() => {\r\n               clearGlobalUser();\r\n               history.push('/login');\r\n        })\r\n        .catch((err)=> {\r\n            console.log(err);\r\n        }) \r\n    }\r\n\r\n    const dropDownOptions = () => [\r\n        {\r\n            key: \"user\",\r\n            text:<span>Signed in as <strong>{user.user.displayName}</strong></span>,\r\n            disabled:true\r\n        },\r\n        {\r\n            key: \"avatar\",\r\n            text:<span>Change Avatar</span>\r\n        },\r\n        {\r\n            key:\"signout\",\r\n            text:<span onClick={signOutUser}>Sign Out</span>\r\n        }\r\n    ]\r\n\r\n\r\n    return (\r\n     <Grid style={{background: '#4c3c4c'}}>\r\n     <Grid.Column>\r\n         <Grid.Row style={{ padding:'1.3em', margin:0}}>\r\n             <Header inverted floated=\"left\" as=\"h2\">\r\n                 <Header.Content>\r\n                     <Icon name=\"code\" />\r\n                     Dev Chat\r\n                 </Header.Content>\r\n             </Header>\r\n         </Grid.Row>\r\n         <Header style={{padding:'0.25em'}} as=\"h4\" inverted>\r\n             <Dropdown trigger={<span>\r\n                 <Image src={user.user.photoURL} spaced=\"right\" avatar />\r\n                 {user.user.displayName}</span>}  options={dropDownOptions()}/>\r\n         </Header>\r\n     </Grid.Column>\r\n     </Grid>\r\n    )\r\n  \r\n    }\r\n\r\nexport default UserPanel;\r\n","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\SidePanel\\Channels.js",["131","132"],"import React, { useEffect, useState }from 'react';\r\nimport { Menu, MenuItem, Modal, Form, Button, Input, Icon} from 'semantic-ui-react';\r\nimport { useUserContext } from '../../context/user_context';\r\nimport { useChannelContext } from '../../context/channel_context';\r\nimport firebase from '../../firebase';\r\n\r\n\r\nconst Channels = () => {\r\n    const [channels, setChannels] = useState([]);\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [channelName, setChannelName] = useState(\"\");\r\n    const [channelDescription, setChannelDescription] = useState(\"\");\r\n    const [channelsRef, setChannelsRef] = useState(firebase.database().ref('channels'));\r\n    const { user } = useUserContext();\r\n    const { channel, setChannel } = useChannelContext();\r\n    const [activeChannel, setActiveChannel] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(formIsValid(channelName, channelDescription)) {\r\n            setModalOpen(false);\r\n            addChannel();\r\n        }\r\n    }\r\n    \r\n    const formIsValid = (channelName, channelDescription) => channelName && channelDescription;\r\n\r\n    const addChannel = () => {\r\n        const key = channelsRef.push().key;\r\n        const newChannel = {\r\n            id:key,\r\n            name:channelName,\r\n            details:channelDescription,\r\n            createdBy: {\r\n                name:user.user.displayName,\r\n                avatar:user.user.photoURL\r\n            }\r\n        }\r\n\r\n        channelsRef.child(key)\r\n        .update(newChannel)\r\n        .then(() => {\r\n            setChannelName('');\r\n            setChannelDescription('');\r\n            setModalOpen(false);\r\n            console.log(\"channel added\");\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    const addListeners = () => {\r\n        if(channel != null && channel !== undefined) {\r\n        let loadedChannels = [];\r\n\r\n        channelsRef.on('child_added', (snap)=> {\r\n            console.log(snap, \"is this all the channels\");\r\n           loadedChannels.push(snap.val()); \r\n  setChannels(loadedChannels);\r\n        console.log(loadedChannels, \"the loaded channels\")\r\n         setChannel(loadedChannels[0]);\r\n               setActiveChannel(loadedChannels[0]);\r\n               console.log(activeChannel,  \"the active channel\");  \r\n\r\n\r\n           \r\n        })\r\n         \r\n    }\r\n}\r\n\r\n    useEffect(()=> {\r\n        addListeners();\r\n        console.log(\"this ran!\");\r\n        console.log(activeChannel,  \"the active channel in useEffect after call\");    \r\n    },[])\r\n\r\n    const displayChannels = (channels) => (\r\n        channels.length > 0 && channels.map(channel => (\r\n          <MenuItem className={activeChannel.name === channel.name ? 'active' : ''} key={channel.id} onClick={() => changeChannel(channel)} name={channel.name} style={{opacity:0.7}}>\r\n             # {channel.name}\r\n          </MenuItem>  \r\n        )\r\n    )\r\n    )\r\n\r\n\r\n\r\n    const changeChannel = (channel) => {\r\n         setActiveChannel(channel);\r\n        setChannel(channel);\r\n        console.log(activeChannel);\r\n    }\r\n    return (\r\n        <div>\r\n      <Menu.Menu className=\"menu\">\r\n           <Menu.Item>\r\n               <span>\r\n                   <Icon name=\"exchange\" /> CHANNELS\r\n               </span>{\"     \"}\r\n                {channels.length} <Icon name=\"add\" onClick={() => setModalOpen(true)} />\r\n           </Menu.Item>\r\n           { displayChannels(channels) }\r\n      </Menu.Menu>\r\n\r\n      <Modal basic open={modalOpen} onClose={() => setModalOpen(false)}>\r\n          <Modal.Header>Add a Channel</Modal.Header>\r\n          <Modal.Content>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Field>\r\n                    <Input fluid value={channelName} label=\"Name of Channel\" name=\"channelName\" onChange={(e) => setChannelName(e.target.value)}/>\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <Input fluid value={channelDescription} label=\"Channel Description\" name=\"channelDescription\" onChange={(e) => setChannelDescription(e.target.value)}/>\r\n                </Form.Field>\r\n            </Form>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n              <Button color=\"green\" inverted onClick={handleSubmit}>\r\n                  <Icon name=\"checkmark\" /> Add\r\n              </Button>\r\n              <Button color=\"red\" inverted onClick={()=> setModalOpen(false)}>\r\n                  <Icon name=\"remove\"/> Cancel\r\n              </Button>\r\n          </Modal.Actions>\r\n      </Modal>\r\n   \r\n   </div>\r\n    )\r\n  \r\n    }\r\n\r\nexport default Channels;\r\n","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\context\\channel_context.js",["133"],"import React, { useEffect, useContext, useReducer } from 'react'\r\nimport reducer from '../reducers/channel_reducer';\r\nimport {\r\n  SET_CHANNEL\r\n} from '../actions';\r\n\r\nconst initialState = {channel:{id:1}}\r\n\r\nconst ChannelContext = React.createContext()\r\n\r\nexport const ChannelProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n\r\n  const setChannel = (channel) => {\r\n    dispatch({type:SET_CHANNEL, payload:channel})\r\n  }\r\n\r\n  return (\r\n    <ChannelContext.Provider value={{...state, setChannel }}>{children}</ChannelContext.Provider>\r\n  )\r\n}\r\n// make sure use\r\nexport const useChannelContext = () => {\r\n  return useContext(ChannelContext)\r\n}\r\n","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\reducers\\channel_reducer.js",[],"C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\Messages\\MessagesHeader.js",[],"C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\Messages\\MessagesForm.js",["134","135","136","137"],"import React, {useState, useEffect} from 'react';\r\nimport {Segment, Button, Input } from 'semantic-ui-react';\r\nimport  {useChannelContext} from '../../context/channel_context';\r\nimport { useUserContext } from '../../context/user_context';\r\nimport firebase from '../../firebase';\r\nimport FileModal from './FileModal';\r\nimport ProgressBar from './ProgressBar';\r\nimport { Picker, emojiIndex } from 'emoji-mart';\r\nimport 'emoji-mart/css/emoji-mart.css';\r\n\r\nconst { uuid } = require('uuidv4');\r\n\r\n\r\nconst MessagesForm = () => {\r\n\r\n    const [message, setMessage] = useState('');\r\n    const [storageRef, setStorageRef] = useState(firebase.storage().ref());\r\n    const [percentageUpLoaded, setPercentageUpLoaded] = useState(0);\r\n    const [upLoadTask, setUpLoadTask] = useState(null);\r\n    const [upLoadState, setUpLoadState] = useState('done');\r\n    const { channel } = useChannelContext();\r\n    const { user }  = useUserContext();\r\n    const [messageRef, setMessageRef] = useState(firebase.database().ref('messages'));\r\n    const [modal, setModal] = useState(false);\r\n    const [emojiPicker, setEmojiPicker] = useState(false);\r\n\r\n    const sendMessage = () => {\r\n        if(message !== null && channel !== undefined) {\r\n        messageRef.child(channel.id)\r\n        .push()\r\n        .set(createMessage(user.user))\r\n        .then(()=> {\r\n            setMessage('');\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n}\r\n\r\n    const createMessage = (globalUser, fileUrl = null) => {\r\n        const messageToSend = {\r\n            timestamp:firebase.database.ServerValue.TIMESTAMP,\r\n            user: {\r\n               id:globalUser.uid,\r\n               name:globalUser.displayName,\r\n               avatar:globalUser.photoURL \r\n            }\r\n        }\r\n        if(fileUrl !== null) {\r\n            messageToSend['image'] = fileUrl;\r\n        } else {\r\n            messageToSend['content'] = message;\r\n        }\r\n        return messageToSend; \r\n    }\r\n\r\n    const upLoadFile = (file, metaData) => {\r\n        const filePath = `chat/public/${uuid()}.jpg`;\r\n        setUpLoadTask(storageRef.child(filePath).put(file, metaData))\r\n        setUpLoadState(\"uploading\");\r\n      }\r\n\r\n    useEffect(() => {\r\n        console.log('has the effect been called!')\r\n        console.log(channel, \"length\");\r\n        if(channel !== null && channel !== undefined){\r\n         const pathToUpLoad = channel.id;\r\n         console.log(upLoadTask, \"uploadtask\");\r\n         if(upLoadTask !== null){\r\n             console.log(\"has this part been logged\");\r\n         upLoadTask.on('', snap => {\r\n             console.log(\"here we go int the\")\r\n            const percentageUpLoaded = Math.round((snap.bytesTransferred / snap.totalBytes) * 100);\r\n            setPercentageUpLoaded(percentageUpLoaded);\r\n             upLoadTask.snapshot.ref.getDownloadURL().then(downloadUrl => {\r\n                 console.log(downloadUrl,\"the download url\")\r\n                 console.log(\"what about here!\")\r\n             sendFileMessage(downloadUrl, messageRef, pathToUpLoad)\r\n         }).catch(err => {\r\n             console.log(err);\r\n         })\r\n         })\r\n        \r\n        \r\n\r\n        }\r\n    }\r\n    },[upLoadTask]);\r\n\r\n    const sendFileMessage = (url, ref, path) => {\r\n        console.log(user, url, \"the details\");\r\n        console.log(path, \"the path passed\");\r\n        ref.child(path).push().set(createMessage(user.user, url))\r\n        .then(() => setUpLoadState(\"done\"))\r\n        .catch((err) => console.log(err));\r\n    }\r\n\r\n    const handleTogglePicker = () => {\r\n        setEmojiPicker(!emojiPicker);\r\n    }\r\n\r\n    const handleAddEmoji = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <Segment className=\"message__form\">\r\n            {emojiPicker && (\r\n                <Picker set=\"apple\" onSelect={handleAddEmoji} className=\"emojipicker\" title=\"Pick your emoji\" emoji=\"point_up\" />\r\n            )}\r\n            <Input value={message} onChange={(e) => setMessage(e.target.value)}\r\n             fluid name=\"message\" style={{ marginBottom: '0.7em'}} \r\n             label={<Button \r\n                icon={'add'}\r\n                onClick={handleTogglePicker} />} \r\n             labelPosition=\"left\" placeholder=\"Write your message\"/>\r\n            <Button.Group icon widths=\"2\">\r\n                <Button onClick={() => sendMessage()} color=\"orange\" content=\"Add Reply\" labelPosition=\"left\" icon=\"edit\" />\r\n                <Button color=\"teal\" content=\"Upload Media\" disabled={upLoadState === \"uploading\"}\r\n                   labelPosition=\"right\" icon=\"cloud upload\" onClick={()=> setModal(true)} />\r\n            </Button.Group>\r\n            \r\n               <FileModal modal={modal} closeModal={() => setModal(false)} upLoadFile={upLoadFile} />\r\n                <ProgressBar upLoadState={upLoadState} percentageUpLoaded={percentageUpLoaded} />\r\n        </Segment>\r\n    )\r\n  \r\n    }\r\n\r\nexport default MessagesForm;","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\Messages\\Message.js",[],"C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\Messages\\FileModal.js",["138"],"import React, {useState, useEffect } from 'react';\r\nimport { Modal, Input, Button, Icon} from 'semantic-ui-react';\r\nimport mime from 'mime-types';\r\n\r\n\r\nconst FileModal = ({modal, closeModal, upLoadFile}) => {\r\n\r\n  const [file, setFile] = useState(null);\r\n  const [authorised, setAuthorised] = useState(['image/jpeg', 'image/png']);\r\n\r\n  const addFile = () => {\r\n      \r\n        // eslint-disable-next-line no-restricted-globals\r\n        const file = event.target.files[0];\r\n     \r\n        console.log(file, \"the file being set\")\r\n        if(file) {\r\n            setFile(file);\r\n        }\r\n  }\r\n\r\n  const sendFile = () => {\r\n      console.log(file, \"the file\");\r\n      if(file !== null) {\r\n          if(isAuthorised(file.name)) {\r\n                const metaData = { contentType: mime.lookup(file.name)}\r\n                upLoadFile(file, metaData);\r\n                closeModal();\r\n                setFile(null);\r\n          }\r\n      }\r\n  }\r\n\r\n  useEffect(()=> {\r\n\r\n  }, [file])\r\n\r\n  const isAuthorised = (fileName) => authorised.includes(mime.lookup(fileName));\r\n\r\n\r\n\r\n    return (\r\n     <Modal basic open={modal} onClose={closeModal}>\r\n         <Modal.Content>\r\n             <Input onChange={addFile} fluid label=\"File Upload\" name=\"file\" type=\"file\" />\r\n         </Modal.Content>\r\n        <Modal.Actions>\r\n            <Button onClick={sendFile} color=\"green\" inverted>\r\n                <Icon name=\"checkmark\" />  Send\r\n            </Button>\r\n            <Button color=\"red\" inverted onClick={closeModal}>\r\n                <Icon name=\"remove\" />  Cancel\r\n            </Button>\r\n        </Modal.Actions>\r\n     </Modal>\r\n   \r\n    )\r\n  \r\n    }\r\n\r\nexport default FileModal;\r\n","C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\Messages\\ProgressBar.js",[],"C:\\Users\\Steven\\Desktop\\chatAppUpdatedReact\\my-chat-app\\src\\components\\SidePanel\\DirectMessages.js",["139","140","141","142","143","144","145","146","147","148"],"import React, {useEffect, useState} from 'react';\r\nimport { Grid, Menu, Form, Segment, Button, Header, Message, Icon} from 'semantic-ui-react';\r\nimport { useUserContext } from '../../context/user_context';\r\nimport firebase from 'firebase';\r\n\r\nconst DirectMessages = () => {\r\n\r\n    const [users, setUsers] = useState([])\r\n    const { user } = useUserContext();\r\n    const [usersRef, setUsersRef] = useState(firebase.database().ref('users'));\r\n    const [connectedRef, setConnectedRef] = useState(firebase.database().ref('.info/connected'));\r\n    const [presenceRef, setPresenceRef] = useState(firebase.database().ref('presence'));\r\n\r\n\r\n    useEffect(()=> {\r\n        console.log(user)\r\n        if(user !== []) {\r\n            addListeners(user.user.uid);\r\n        }\r\n         if(users !== []) {\r\n            addListeners2(user.user.uid)\r\n        }\r\n    },[user, users]);\r\n\r\n    const addListeners2 = (currentUserUid) => {\r\n        connectedRef.on('value', snap => {\r\n            if(snap.val() === true) {\r\n              const ref = presenceRef.child(currentUserUid);  \r\n              ref.set(true);  \r\n              ref.onDisconnect().remove(err => {\r\n                  if(err !== null) {\r\n                      console.log(err);\r\n                  }\r\n              }) \r\n            }\r\n        });\r\n\r\n        presenceRef.on('child_added', (snap) => {\r\n            if(currentUserUid !== snap.key) {\r\n                 addStatusToUser(snap.key);\r\n            }\r\n        })\r\n\r\n        presenceRef.on('child_removed',(snap) => {\r\n         if(currentUserUid !== snap.key) {\r\n             addStatusToUser(snap.key, false);\r\n         }\r\n     })\r\n    }\r\n\r\n    const addListeners = (currentUserUid) => {\r\n        let loadedUsers = [];\r\n           usersRef.on('child_added', (snap) => {\r\n            if(currentUserUid !== snap.key) {\r\n                console.log(\"true1\")\r\n                let user1 = snap.val();\r\n                user1['uid'] = snap.key;\r\n                user1['status'] = 'offline';\r\n                loadedUsers.push(user1);\r\n                setUsers(loadedUsers)\r\n                console.log(loadedUsers);\r\n            }   \r\n           })\r\n\r\n         \r\n\r\n           } \r\n           \r\n    const addStatusToUser = (userId, connected = true) => {\r\n        console.log(users, \"llwllh\")\r\n        if(users !== undefined){\r\n            console.log(users, \"in messages users\")\r\n        const updatedUsers = users.reduce((acc, user) => {\r\n            if(user.uid === userId) {\r\n                user['status'] = `${connected ? 'online' : 'offline'}`;\r\n            }\r\n            return acc.concat(user);\r\n        }, []);\r\n        setUsers(updatedUsers)\r\n    }\r\n    }\r\n    const isUserOnline = (user) => user.status === 'online';\r\n\r\n    return (\r\n    <Menu.Menu className=\"menu\">\r\n        <Menu.Item>\r\n            <span>\r\n                <Icon name=\"mail\" /> DIRECT MESSAGES\r\n            </span> {' '}\r\n            ({users.length})\r\n        </Menu.Item>\r\n        {users.map(user => (\r\n            <Menu.Item key={user.uid} onClick={()=> console.log(user)} style={{opacity:0.7, fontStyle:'italic'}} >\r\n               <Icon name=\"circle\" color={isUserOnline(user) ? 'green' : 'red'} />\r\n               @ {user.name}\r\n            </Menu.Item>\r\n        )\r\n    )}\r\n    </Menu.Menu>\r\n   \r\n    )\r\n  \r\n    }\r\n\r\nexport default DirectMessages;\r\n",{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":9,"column":16,"nodeType":"155","messageId":"156","endLine":9,"endColumn":20},{"ruleId":"153","severity":1,"message":"157","line":9,"column":22,"nodeType":"155","messageId":"156","endLine":9,"endColumn":29},{"ruleId":"153","severity":1,"message":"158","line":9,"column":31,"nodeType":"155","messageId":"156","endLine":9,"endColumn":37},{"ruleId":"153","severity":1,"message":"159","line":9,"column":39,"nodeType":"155","messageId":"156","endLine":9,"endColumn":45},{"ruleId":"153","severity":1,"message":"160","line":9,"column":47,"nodeType":"155","messageId":"156","endLine":9,"endColumn":54},{"ruleId":"153","severity":1,"message":"161","line":9,"column":56,"nodeType":"155","messageId":"156","endLine":9,"endColumn":60},{"ruleId":"153","severity":1,"message":"162","line":16,"column":22,"nodeType":"155","messageId":"156","endLine":16,"endColumn":33},{"ruleId":"153","severity":1,"message":"163","line":12,"column":11,"nodeType":"155","messageId":"156","endLine":12,"endColumn":18},{"ruleId":"153","severity":1,"message":"164","line":12,"column":20,"nodeType":"155","messageId":"156","endLine":12,"endColumn":30},{"ruleId":"153","severity":1,"message":"165","line":1,"column":17,"nodeType":"155","messageId":"156","endLine":1,"endColumn":26},{"ruleId":"153","severity":1,"message":"166","line":14,"column":13,"nodeType":"155","messageId":"156","endLine":14,"endColumn":17},{"ruleId":"167","severity":1,"message":"168","line":40,"column":7,"nodeType":"169","endLine":40,"endColumn":16,"suggestions":"170"},{"ruleId":"153","severity":1,"message":"171","line":2,"column":10,"nodeType":"155","messageId":"156","endLine":2,"endColumn":14},{"ruleId":"153","severity":1,"message":"154","line":2,"column":22,"nodeType":"155","messageId":"156","endLine":2,"endColumn":26},{"ruleId":"153","severity":1,"message":"157","line":2,"column":28,"nodeType":"155","messageId":"156","endLine":2,"endColumn":35},{"ruleId":"153","severity":1,"message":"158","line":2,"column":37,"nodeType":"155","messageId":"156","endLine":2,"endColumn":43},{"ruleId":"153","severity":1,"message":"159","line":2,"column":45,"nodeType":"155","messageId":"156","endLine":2,"endColumn":51},{"ruleId":"153","severity":1,"message":"160","line":2,"column":53,"nodeType":"155","messageId":"156","endLine":2,"endColumn":60},{"ruleId":"153","severity":1,"message":"161","line":2,"column":62,"nodeType":"155","messageId":"156","endLine":2,"endColumn":66},{"ruleId":"153","severity":1,"message":"161","line":2,"column":37,"nodeType":"155","messageId":"156","endLine":2,"endColumn":41},{"ruleId":"153","severity":1,"message":"172","line":6,"column":25,"nodeType":"155","messageId":"156","endLine":6,"endColumn":39},{"ruleId":"153","severity":1,"message":"173","line":3,"column":16,"nodeType":"155","messageId":"156","endLine":3,"endColumn":20},{"ruleId":"153","severity":1,"message":"154","line":3,"column":22,"nodeType":"155","messageId":"156","endLine":3,"endColumn":26},{"ruleId":"153","severity":1,"message":"157","line":3,"column":28,"nodeType":"155","messageId":"156","endLine":3,"endColumn":35},{"ruleId":"153","severity":1,"message":"158","line":3,"column":37,"nodeType":"155","messageId":"156","endLine":3,"endColumn":43},{"ruleId":"153","severity":1,"message":"160","line":3,"column":63,"nodeType":"155","messageId":"156","endLine":3,"endColumn":70},{"ruleId":"153","severity":1,"message":"174","line":13,"column":25,"nodeType":"155","messageId":"156","endLine":13,"endColumn":39},{"ruleId":"167","severity":1,"message":"175","line":77,"column":7,"nodeType":"169","endLine":77,"endColumn":9,"suggestions":"176"},{"ruleId":"153","severity":1,"message":"165","line":1,"column":17,"nodeType":"155","messageId":"156","endLine":1,"endColumn":26},{"ruleId":"153","severity":1,"message":"177","line":8,"column":18,"nodeType":"155","messageId":"156","endLine":8,"endColumn":28},{"ruleId":"153","severity":1,"message":"178","line":17,"column":24,"nodeType":"155","messageId":"156","endLine":17,"endColumn":37},{"ruleId":"153","severity":1,"message":"179","line":23,"column":24,"nodeType":"155","messageId":"156","endLine":23,"endColumn":37},{"ruleId":"167","severity":1,"message":"180","line":89,"column":7,"nodeType":"169","endLine":89,"endColumn":19,"suggestions":"181"},{"ruleId":"153","severity":1,"message":"182","line":9,"column":22,"nodeType":"155","messageId":"156","endLine":9,"endColumn":35},{"ruleId":"153","severity":1,"message":"171","line":2,"column":10,"nodeType":"155","messageId":"156","endLine":2,"endColumn":14},{"ruleId":"153","severity":1,"message":"154","line":2,"column":22,"nodeType":"155","messageId":"156","endLine":2,"endColumn":26},{"ruleId":"153","severity":1,"message":"157","line":2,"column":28,"nodeType":"155","messageId":"156","endLine":2,"endColumn":35},{"ruleId":"153","severity":1,"message":"158","line":2,"column":37,"nodeType":"155","messageId":"156","endLine":2,"endColumn":43},{"ruleId":"153","severity":1,"message":"159","line":2,"column":45,"nodeType":"155","messageId":"156","endLine":2,"endColumn":51},{"ruleId":"153","severity":1,"message":"160","line":2,"column":53,"nodeType":"155","messageId":"156","endLine":2,"endColumn":60},{"ruleId":"153","severity":1,"message":"162","line":10,"column":22,"nodeType":"155","messageId":"156","endLine":10,"endColumn":33},{"ruleId":"153","severity":1,"message":"183","line":11,"column":26,"nodeType":"155","messageId":"156","endLine":11,"endColumn":41},{"ruleId":"153","severity":1,"message":"184","line":12,"column":25,"nodeType":"155","messageId":"156","endLine":12,"endColumn":39},{"ruleId":"167","severity":1,"message":"185","line":23,"column":7,"nodeType":"169","endLine":23,"endColumn":20,"suggestions":"186"},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'Segment' is defined but never used.","'Button' is defined but never used.","'Header' is defined but never used.","'Message' is defined but never used.","'Icon' is defined but never used.","'setUsersRef' is assigned a value but never used.","'channel' is assigned a value but never used.","'setChannel' is assigned a value but never used.","'useEffect' is defined but never used.","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["189"],"'Grid' is defined but never used.","'setActiveIndex' is assigned a value but never used.","'Menu' is defined but never used.","'setChannelsRef' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activeChannel' and 'addListeners'. Either include them or remove the dependency array.",["190"],"'emojiIndex' is defined but never used.","'setStorageRef' is assigned a value but never used.","'setMessageRef' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'channel', 'messageRef', and 'sendFileMessage'. Either include them or remove the dependency array.",["191"],"'setAuthorised' is assigned a value but never used.","'setConnectedRef' is assigned a value but never used.","'setPresenceRef' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addListeners' and 'addListeners2'. Either include them or remove the dependency array.",["192"],"no-global-assign","no-unsafe-negation",{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},"Update the dependencies array to be: [channel, history]",{"range":"201","text":"202"},"Update the dependencies array to be: [activeChannel, addListeners]",{"range":"203","text":"204"},"Update the dependencies array to be: [channel, messageRef, sendFileMessage, upLoadTask]",{"range":"205","text":"206"},"Update the dependencies array to be: [addListeners, addListeners2, user, users]",{"range":"207","text":"208"},[1587,1596],"[channel, history]",[2564,2566],"[activeChannel, addListeners]",[3189,3201],"[channel, messageRef, sendFileMessage, upLoadTask]",[852,865],"[addListeners, addListeners2, user, users]"]